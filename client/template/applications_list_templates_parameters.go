// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewApplicationsListTemplatesParams creates a new ApplicationsListTemplatesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewApplicationsListTemplatesParams() *ApplicationsListTemplatesParams {
	return &ApplicationsListTemplatesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewApplicationsListTemplatesParamsWithTimeout creates a new ApplicationsListTemplatesParams object
// with the ability to set a timeout on a request.
func NewApplicationsListTemplatesParamsWithTimeout(timeout time.Duration) *ApplicationsListTemplatesParams {
	return &ApplicationsListTemplatesParams{
		timeout: timeout,
	}
}

// NewApplicationsListTemplatesParamsWithContext creates a new ApplicationsListTemplatesParams object
// with the ability to set a context for a request.
func NewApplicationsListTemplatesParamsWithContext(ctx context.Context) *ApplicationsListTemplatesParams {
	return &ApplicationsListTemplatesParams{
		Context: ctx,
	}
}

// NewApplicationsListTemplatesParamsWithHTTPClient creates a new ApplicationsListTemplatesParams object
// with the ability to set a custom HTTPClient for a request.
func NewApplicationsListTemplatesParamsWithHTTPClient(client *http.Client) *ApplicationsListTemplatesParams {
	return &ApplicationsListTemplatesParams{
		HTTPClient: client,
	}
}

/*
ApplicationsListTemplatesParams contains all the parameters to send to the API endpoint

	for the applications list templates operation.

	Typically these are written to a http.Request.
*/
type ApplicationsListTemplatesParams struct {

	/* XWorkspaceID.

	   workspace id
	*/
	XWorkspaceID string

	/* End.

	   end
	*/
	End *int64

	/* Order.

	   sort order
	*/
	Order *string

	/* Sort.

	   sort column
	*/
	Sort *string

	/* Start.

	   start
	*/
	Start *int64

	/* ApplicationID.

	   array of template ids
	*/
	ApplicationID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the applications list templates params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplicationsListTemplatesParams) WithDefaults() *ApplicationsListTemplatesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the applications list templates params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplicationsListTemplatesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the applications list templates params
func (o *ApplicationsListTemplatesParams) WithTimeout(timeout time.Duration) *ApplicationsListTemplatesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the applications list templates params
func (o *ApplicationsListTemplatesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the applications list templates params
func (o *ApplicationsListTemplatesParams) WithContext(ctx context.Context) *ApplicationsListTemplatesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the applications list templates params
func (o *ApplicationsListTemplatesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the applications list templates params
func (o *ApplicationsListTemplatesParams) WithHTTPClient(client *http.Client) *ApplicationsListTemplatesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the applications list templates params
func (o *ApplicationsListTemplatesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXWorkspaceID adds the xWorkspaceID to the applications list templates params
func (o *ApplicationsListTemplatesParams) WithXWorkspaceID(xWorkspaceID string) *ApplicationsListTemplatesParams {
	o.SetXWorkspaceID(xWorkspaceID)
	return o
}

// SetXWorkspaceID adds the xWorkspaceId to the applications list templates params
func (o *ApplicationsListTemplatesParams) SetXWorkspaceID(xWorkspaceID string) {
	o.XWorkspaceID = xWorkspaceID
}

// WithEnd adds the end to the applications list templates params
func (o *ApplicationsListTemplatesParams) WithEnd(end *int64) *ApplicationsListTemplatesParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the applications list templates params
func (o *ApplicationsListTemplatesParams) SetEnd(end *int64) {
	o.End = end
}

// WithOrder adds the order to the applications list templates params
func (o *ApplicationsListTemplatesParams) WithOrder(order *string) *ApplicationsListTemplatesParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the applications list templates params
func (o *ApplicationsListTemplatesParams) SetOrder(order *string) {
	o.Order = order
}

// WithSort adds the sort to the applications list templates params
func (o *ApplicationsListTemplatesParams) WithSort(sort *string) *ApplicationsListTemplatesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the applications list templates params
func (o *ApplicationsListTemplatesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStart adds the start to the applications list templates params
func (o *ApplicationsListTemplatesParams) WithStart(start *int64) *ApplicationsListTemplatesParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the applications list templates params
func (o *ApplicationsListTemplatesParams) SetStart(start *int64) {
	o.Start = start
}

// WithApplicationID adds the applicationID to the applications list templates params
func (o *ApplicationsListTemplatesParams) WithApplicationID(applicationID *string) *ApplicationsListTemplatesParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the applications list templates params
func (o *ApplicationsListTemplatesParams) SetApplicationID(applicationID *string) {
	o.ApplicationID = applicationID
}

// WriteToRequest writes these params to a swagger request
func (o *ApplicationsListTemplatesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Workspace-ID
	if err := r.SetHeaderParam("X-Workspace-ID", o.XWorkspaceID); err != nil {
		return err
	}

	if o.End != nil {

		// query param _end
		var qrEnd int64

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatInt64(qrEnd)
		if qEnd != "" {

			if err := r.SetQueryParam("_end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param _order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("_order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param _sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("_sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param _start
		var qrStart int64

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt64(qrStart)
		if qStart != "" {

			if err := r.SetQueryParam("_start", qStart); err != nil {
				return err
			}
		}
	}

	if o.ApplicationID != nil {

		// query param application_id
		var qrApplicationID string

		if o.ApplicationID != nil {
			qrApplicationID = *o.ApplicationID
		}
		qApplicationID := qrApplicationID
		if qApplicationID != "" {

			if err := r.SetQueryParam("application_id", qApplicationID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
