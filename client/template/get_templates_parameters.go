// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTemplatesParams creates a new GetTemplatesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTemplatesParams() *GetTemplatesParams {
	return &GetTemplatesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTemplatesParamsWithTimeout creates a new GetTemplatesParams object
// with the ability to set a timeout on a request.
func NewGetTemplatesParamsWithTimeout(timeout time.Duration) *GetTemplatesParams {
	return &GetTemplatesParams{
		timeout: timeout,
	}
}

// NewGetTemplatesParamsWithContext creates a new GetTemplatesParams object
// with the ability to set a context for a request.
func NewGetTemplatesParamsWithContext(ctx context.Context) *GetTemplatesParams {
	return &GetTemplatesParams{
		Context: ctx,
	}
}

// NewGetTemplatesParamsWithHTTPClient creates a new GetTemplatesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTemplatesParamsWithHTTPClient(client *http.Client) *GetTemplatesParams {
	return &GetTemplatesParams{
		HTTPClient: client,
	}
}

/*
GetTemplatesParams contains all the parameters to send to the API endpoint

	for the get templates operation.

	Typically these are written to a http.Request.
*/
type GetTemplatesParams struct {

	/* XWorkspaceID.

	   workspace id
	*/
	XWorkspaceID string

	/* End.

	   end
	*/
	End *int64

	/* Order.

	   sort order
	*/
	Order *string

	/* Sort.

	   sort column
	*/
	Sort *string

	/* Start.

	   start
	*/
	Start *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get templates params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTemplatesParams) WithDefaults() *GetTemplatesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get templates params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTemplatesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get templates params
func (o *GetTemplatesParams) WithTimeout(timeout time.Duration) *GetTemplatesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get templates params
func (o *GetTemplatesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get templates params
func (o *GetTemplatesParams) WithContext(ctx context.Context) *GetTemplatesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get templates params
func (o *GetTemplatesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get templates params
func (o *GetTemplatesParams) WithHTTPClient(client *http.Client) *GetTemplatesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get templates params
func (o *GetTemplatesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXWorkspaceID adds the xWorkspaceID to the get templates params
func (o *GetTemplatesParams) WithXWorkspaceID(xWorkspaceID string) *GetTemplatesParams {
	o.SetXWorkspaceID(xWorkspaceID)
	return o
}

// SetXWorkspaceID adds the xWorkspaceId to the get templates params
func (o *GetTemplatesParams) SetXWorkspaceID(xWorkspaceID string) {
	o.XWorkspaceID = xWorkspaceID
}

// WithEnd adds the end to the get templates params
func (o *GetTemplatesParams) WithEnd(end *int64) *GetTemplatesParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get templates params
func (o *GetTemplatesParams) SetEnd(end *int64) {
	o.End = end
}

// WithOrder adds the order to the get templates params
func (o *GetTemplatesParams) WithOrder(order *string) *GetTemplatesParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the get templates params
func (o *GetTemplatesParams) SetOrder(order *string) {
	o.Order = order
}

// WithSort adds the sort to the get templates params
func (o *GetTemplatesParams) WithSort(sort *string) *GetTemplatesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get templates params
func (o *GetTemplatesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStart adds the start to the get templates params
func (o *GetTemplatesParams) WithStart(start *int64) *GetTemplatesParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get templates params
func (o *GetTemplatesParams) SetStart(start *int64) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetTemplatesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Workspace-ID
	if err := r.SetHeaderParam("X-Workspace-ID", o.XWorkspaceID); err != nil {
		return err
	}

	if o.End != nil {

		// query param _end
		var qrEnd int64

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatInt64(qrEnd)
		if qEnd != "" {

			if err := r.SetQueryParam("_end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param _order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("_order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param _sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("_sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param _start
		var qrStart int64

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt64(qrStart)
		if qStart != "" {

			if err := r.SetQueryParam("_start", qStart); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
