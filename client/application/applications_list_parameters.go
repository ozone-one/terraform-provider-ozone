// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewApplicationsListParams creates a new ApplicationsListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewApplicationsListParams() *ApplicationsListParams {
	return &ApplicationsListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewApplicationsListParamsWithTimeout creates a new ApplicationsListParams object
// with the ability to set a timeout on a request.
func NewApplicationsListParamsWithTimeout(timeout time.Duration) *ApplicationsListParams {
	return &ApplicationsListParams{
		timeout: timeout,
	}
}

// NewApplicationsListParamsWithContext creates a new ApplicationsListParams object
// with the ability to set a context for a request.
func NewApplicationsListParamsWithContext(ctx context.Context) *ApplicationsListParams {
	return &ApplicationsListParams{
		Context: ctx,
	}
}

// NewApplicationsListParamsWithHTTPClient creates a new ApplicationsListParams object
// with the ability to set a custom HTTPClient for a request.
func NewApplicationsListParamsWithHTTPClient(client *http.Client) *ApplicationsListParams {
	return &ApplicationsListParams{
		HTTPClient: client,
	}
}

/*
ApplicationsListParams contains all the parameters to send to the API endpoint

	for the applications list operation.

	Typically these are written to a http.Request.
*/
type ApplicationsListParams struct {

	/* XWorkspaceID.

	   workspace id
	*/
	XWorkspaceID string

	/* End.

	   end
	*/
	End *int64

	/* Order.

	   sort order
	*/
	Order *string

	/* Sort.

	   sort column
	*/
	Sort *string

	/* Start.

	   start
	*/
	Start *int64

	/* MicroserviceSlug.

	   microservice slug
	*/
	MicroserviceSlug *string

	/* Q.

	   filter by name
	*/
	Q *string

	/* RegistryID.

	   filter by registry_id
	*/
	RegistryID *string

	/* RepositoryID.

	   filter by repository_id
	*/
	RepositoryID *string

	/* Type.

	   filter by type
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the applications list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplicationsListParams) WithDefaults() *ApplicationsListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the applications list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplicationsListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the applications list params
func (o *ApplicationsListParams) WithTimeout(timeout time.Duration) *ApplicationsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the applications list params
func (o *ApplicationsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the applications list params
func (o *ApplicationsListParams) WithContext(ctx context.Context) *ApplicationsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the applications list params
func (o *ApplicationsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the applications list params
func (o *ApplicationsListParams) WithHTTPClient(client *http.Client) *ApplicationsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the applications list params
func (o *ApplicationsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXWorkspaceID adds the xWorkspaceID to the applications list params
func (o *ApplicationsListParams) WithXWorkspaceID(xWorkspaceID string) *ApplicationsListParams {
	o.SetXWorkspaceID(xWorkspaceID)
	return o
}

// SetXWorkspaceID adds the xWorkspaceId to the applications list params
func (o *ApplicationsListParams) SetXWorkspaceID(xWorkspaceID string) {
	o.XWorkspaceID = xWorkspaceID
}

// WithEnd adds the end to the applications list params
func (o *ApplicationsListParams) WithEnd(end *int64) *ApplicationsListParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the applications list params
func (o *ApplicationsListParams) SetEnd(end *int64) {
	o.End = end
}

// WithOrder adds the order to the applications list params
func (o *ApplicationsListParams) WithOrder(order *string) *ApplicationsListParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the applications list params
func (o *ApplicationsListParams) SetOrder(order *string) {
	o.Order = order
}

// WithSort adds the sort to the applications list params
func (o *ApplicationsListParams) WithSort(sort *string) *ApplicationsListParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the applications list params
func (o *ApplicationsListParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStart adds the start to the applications list params
func (o *ApplicationsListParams) WithStart(start *int64) *ApplicationsListParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the applications list params
func (o *ApplicationsListParams) SetStart(start *int64) {
	o.Start = start
}

// WithMicroserviceSlug adds the microserviceSlug to the applications list params
func (o *ApplicationsListParams) WithMicroserviceSlug(microserviceSlug *string) *ApplicationsListParams {
	o.SetMicroserviceSlug(microserviceSlug)
	return o
}

// SetMicroserviceSlug adds the microserviceSlug to the applications list params
func (o *ApplicationsListParams) SetMicroserviceSlug(microserviceSlug *string) {
	o.MicroserviceSlug = microserviceSlug
}

// WithQ adds the q to the applications list params
func (o *ApplicationsListParams) WithQ(q *string) *ApplicationsListParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the applications list params
func (o *ApplicationsListParams) SetQ(q *string) {
	o.Q = q
}

// WithRegistryID adds the registryID to the applications list params
func (o *ApplicationsListParams) WithRegistryID(registryID *string) *ApplicationsListParams {
	o.SetRegistryID(registryID)
	return o
}

// SetRegistryID adds the registryId to the applications list params
func (o *ApplicationsListParams) SetRegistryID(registryID *string) {
	o.RegistryID = registryID
}

// WithRepositoryID adds the repositoryID to the applications list params
func (o *ApplicationsListParams) WithRepositoryID(repositoryID *string) *ApplicationsListParams {
	o.SetRepositoryID(repositoryID)
	return o
}

// SetRepositoryID adds the repositoryId to the applications list params
func (o *ApplicationsListParams) SetRepositoryID(repositoryID *string) {
	o.RepositoryID = repositoryID
}

// WithType adds the typeVar to the applications list params
func (o *ApplicationsListParams) WithType(typeVar *string) *ApplicationsListParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the applications list params
func (o *ApplicationsListParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ApplicationsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Workspace-ID
	if err := r.SetHeaderParam("X-Workspace-ID", o.XWorkspaceID); err != nil {
		return err
	}

	if o.End != nil {

		// query param _end
		var qrEnd int64

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatInt64(qrEnd)
		if qEnd != "" {

			if err := r.SetQueryParam("_end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param _order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("_order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param _sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("_sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param _start
		var qrStart int64

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt64(qrStart)
		if qStart != "" {

			if err := r.SetQueryParam("_start", qStart); err != nil {
				return err
			}
		}
	}

	if o.MicroserviceSlug != nil {

		// query param microservice_slug
		var qrMicroserviceSlug string

		if o.MicroserviceSlug != nil {
			qrMicroserviceSlug = *o.MicroserviceSlug
		}
		qMicroserviceSlug := qrMicroserviceSlug
		if qMicroserviceSlug != "" {

			if err := r.SetQueryParam("microservice_slug", qMicroserviceSlug); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.RegistryID != nil {

		// query param registry_id
		var qrRegistryID string

		if o.RegistryID != nil {
			qrRegistryID = *o.RegistryID
		}
		qRegistryID := qrRegistryID
		if qRegistryID != "" {

			if err := r.SetQueryParam("registry_id", qRegistryID); err != nil {
				return err
			}
		}
	}

	if o.RepositoryID != nil {

		// query param repository_id
		var qrRepositoryID string

		if o.RepositoryID != nil {
			qrRepositoryID = *o.RepositoryID
		}
		qRepositoryID := qrRepositoryID
		if qRepositoryID != "" {

			if err := r.SetQueryParam("repository_id", qRepositoryID); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
