// Code generated by go-swagger; DO NOT EDIT.

package workspace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workspace API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for workspace API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
WorkspaceCreate creates a new workspace

creates a new workspace
*/
func (a *Client) WorkspaceCreate(params *WorkspaceCreateParams) (*WorkspaceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workspaceCreate",
		Method:             "POST",
		PathPattern:        "/admin/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkspaceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkspaceCreateOK), nil

}

/*
WorkspaceGetByID get workspace by id
*/
func (a *Client) WorkspaceGetByID(params *WorkspaceGetByIDParams) (*WorkspaceGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workspaceGetByID",
		Method:             "GET",
		PathPattern:        "/admin/workspaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkspaceGetByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkspaceGetByIDOK), nil

}

/*
WorkspaceList gives all repositories
*/
func (a *Client) WorkspaceList(params *WorkspaceListParams) (*WorkspaceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workspaceList",
		Method:             "GET",
		PathPattern:        "/admin/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkspaceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkspaceListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
