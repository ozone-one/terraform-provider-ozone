// Code generated by go-swagger; DO NOT EDIT.

package workspace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ozone-one/terraform-provider-ozone/models"
)

// WorkspaceGetByIDReader is a Reader for the WorkspaceGetByID structure.
type WorkspaceGetByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkspaceGetByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkspaceGetByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWorkspaceGetByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWorkspaceGetByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewWorkspaceGetByIDOK creates a WorkspaceGetByIDOK with default headers values
func NewWorkspaceGetByIDOK() *WorkspaceGetByIDOK {
	return &WorkspaceGetByIDOK{}
}

/*
WorkspaceGetByIDOK describes a response with status code 200, with default header values.

OK
*/
type WorkspaceGetByIDOK struct {
	Payload *models.Workspace
}

func (o *WorkspaceGetByIDOK) Error() string {
	return fmt.Sprintf("[GET /admin/workspaces/{id}][%d] workspaceGetByIdOK  %+v", 200, o.Payload)
}
func (o *WorkspaceGetByIDOK) GetPayload() *models.Workspace {
	return o.Payload
}

func (o *WorkspaceGetByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Workspace)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkspaceGetByIDBadRequest creates a WorkspaceGetByIDBadRequest with default headers values
func NewWorkspaceGetByIDBadRequest() *WorkspaceGetByIDBadRequest {
	return &WorkspaceGetByIDBadRequest{}
}

/*
WorkspaceGetByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type WorkspaceGetByIDBadRequest struct {
	Payload interface{}
}

func (o *WorkspaceGetByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /admin/workspaces/{id}][%d] workspaceGetByIdBadRequest  %+v", 400, o.Payload)
}
func (o *WorkspaceGetByIDBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *WorkspaceGetByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkspaceGetByIDInternalServerError creates a WorkspaceGetByIDInternalServerError with default headers values
func NewWorkspaceGetByIDInternalServerError() *WorkspaceGetByIDInternalServerError {
	return &WorkspaceGetByIDInternalServerError{}
}

/*
WorkspaceGetByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type WorkspaceGetByIDInternalServerError struct {
	Payload interface{}
}

func (o *WorkspaceGetByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /admin/workspaces/{id}][%d] workspaceGetByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *WorkspaceGetByIDInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *WorkspaceGetByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
