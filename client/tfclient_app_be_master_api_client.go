// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ozone-one/terraform-provider-ozone/client/application"
	"github.com/ozone-one/terraform-provider-ozone/client/environment"
	"github.com/ozone-one/terraform-provider-ozone/client/pipeline"
	"github.com/ozone-one/terraform-provider-ozone/client/pipelinerun"
	"github.com/ozone-one/terraform-provider-ozone/client/pipelinerunlog"
	"github.com/ozone-one/terraform-provider-ozone/client/registry"
	"github.com/ozone-one/terraform-provider-ozone/client/cluster"
	"github.com/ozone-one/terraform-provider-ozone/client/releaserun"
	"github.com/ozone-one/terraform-provider-ozone/client/releases"
	"github.com/ozone-one/terraform-provider-ozone/client/repository"
	"github.com/ozone-one/terraform-provider-ozone/client/template"
	"github.com/ozone-one/terraform-provider-ozone/client/variables"
	"github.com/ozone-one/terraform-provider-ozone/client/workspace"
)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "swagger-api.in2tive.xyz"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api"
)

// DefaultSchees are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https","http"}

// Config information for AppBeMasterAPI client
type Config struct {
	AccessKey    *string
	WorkspaceID  *string
	TransportCfg *TransportConfig
}

// NewConfig create a new empty client Config
func NewConfig() *Config {
	return &Config{
		TransportCfg: DefaultTransportConfig(),
	}
}

// SetWorkspaceID for the client Config
func (c *Config) SetWorkspaceID(workspaceID *string) {
	c.WorkspaceID = workspaceID
}

// SetAccessKey for the client Config
func (c *Config) SetAccessKey(accessKey *string) {
	c.AccessKey = accessKey
}

// SetAccountDomain for the client Config
func (c *Config) SetAccountDomain(accountDomain *string) {
	if c.TransportCfg == nil {
		c.TransportCfg = DefaultTransportConfig()
	}
	domain := *accountDomain
	c.TransportCfg = c.TransportCfg.WithHost(domain)
}

// SetBasePath for the client Config
func (c *Config) SetBasePath(basePath *string) {
	if c.TransportCfg == nil {
		c.TransportCfg = DefaultTransportConfig()
	}
	path := *basePath
	c.TransportCfg = c.TransportCfg.WithBasePath(path)
}
// SetSchemes for the client Config
func (c *Config) SetSchemes(schemes []string) {
	if c.TransportCfg == nil {
		c.TransportCfg = DefaultTransportConfig()
	}
	c.TransportCfg = c.TransportCfg.WithSchemes(schemes)
}

// New creates a new app be master API client
func New(c *Config) *AppBeMasterAPI {
	transport := httptransport.New(c.TransportCfg.Host, c.TransportCfg.BasePath, c.TransportCfg.Schemes)

	cli := new(AppBeMasterAPI)
	cli.Transport = transport
	authInfo := LMv1Auth(*c.AccessKey)
	cli.AuthInfoWriter = authInfo

	cli.Application = application.New(transport, strfmt.Default, authInfo)

	cli.Pipelinerun = pipelinerun.New(transport, strfmt.Default, authInfo)

	cli.Pipelinerunlog = pipelinerunlog.New(transport, strfmt.Default, authInfo)

	cli.Registry = registry.New(transport, strfmt.Default, authInfo)

	cli.Releaserun = releaserun.New(transport, strfmt.Default, authInfo)

	cli.Releases = releases.New(transport, strfmt.Default, authInfo)

	cli.Repository = repository.New(transport, strfmt.Default, authInfo)

	cli.Template = template.New(transport, strfmt.Default, authInfo)

	cli.Variables = variables.New(transport, strfmt.Default, authInfo)

	cli.Workspace = workspace.New(transport, strfmt.Default, authInfo)

	cli.Pipeline = pipeline.New(transport, strfmt.Default, authInfo)

	cli.Environment = environment.New(transport,strfmt.Default,authInfo)

	cli.Cluster	= cluster.New(transport,strfmt.Default,authInfo)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// AppBeMasterAPI is a client for app be master API
type AppBeMasterAPI struct {
	Application *application.Client

	Pipelinerun *pipelinerun.Client

	Pipelinerunlog *pipelinerunlog.Client

	Registry *registry.Client

	Releaserun *releaserun.Client

	Releases *releases.Client

	Repository *repository.Client

	Template *template.Client

	Variables *variables.Client

	Workspace *workspace.Client

	Pipeline *pipeline.Client

	Environment *environment.Client

	Cluster *cluster.Client

	AuthInfoWriter runtime.ClientAuthInfoWriter
	Transport      runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *AppBeMasterAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Application.SetTransport(transport)

	c.Pipelinerun.SetTransport(transport)

	c.Pipelinerunlog.SetTransport(transport)

	c.Registry.SetTransport(transport)

	c.Releaserun.SetTransport(transport)

	c.Releases.SetTransport(transport)

	c.Repository.SetTransport(transport)

	c.Template.SetTransport(transport)

	c.Variables.SetTransport(transport)

	c.Workspace.SetTransport(transport)
	
	c.Pipeline.SetTransport(transport)

	c.Environment.SetTransport(transport)
	
	c.Cluster.SetTransport(transport)

}

// TODO: See if there is a way to move this out of Facade Template and into Main or Provider templates
func LMv1Auth(accessKey string) runtime.ClientAuthInfoWriter {
	return runtime.ClientAuthInfoWriterFunc(func(r runtime.ClientRequest, _ strfmt.Registry) error {

		r.SetHeaderParam("authorization", accessKey)
		//r.SetHeaderParam("x-workspace-id", workspaceID)
		//TODO Consider moving this up to terraform template level of config
		return r.SetHeaderParam("X-version", "3")
	})
}
