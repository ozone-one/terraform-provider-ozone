// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListRegistryParams creates a new ListRegistryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListRegistryParams() *ListRegistryParams {
	return &ListRegistryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListRegistryParamsWithTimeout creates a new ListRegistryParams object
// with the ability to set a timeout on a request.
func NewListRegistryParamsWithTimeout(timeout time.Duration) *ListRegistryParams {
	return &ListRegistryParams{
		timeout: timeout,
	}
}

// NewListRegistryParamsWithContext creates a new ListRegistryParams object
// with the ability to set a context for a request.
func NewListRegistryParamsWithContext(ctx context.Context) *ListRegistryParams {
	return &ListRegistryParams{
		Context: ctx,
	}
}

// NewListRegistryParamsWithHTTPClient creates a new ListRegistryParams object
// with the ability to set a custom HTTPClient for a request.
func NewListRegistryParamsWithHTTPClient(client *http.Client) *ListRegistryParams {
	return &ListRegistryParams{
		HTTPClient: client,
	}
}

/*
ListRegistryParams contains all the parameters to send to the API endpoint

	for the list registry operation.

	Typically these are written to a http.Request.
*/
type ListRegistryParams struct {

	/* XWorkspaceID.

	   workspace id
	*/
	XWorkspaceID string

	/* End.

	   end
	*/
	End *int64

	/* Order.

	   sort order
	*/
	Order *string

	/* Sort.

	   sort column
	*/
	Sort *string

	/* Start.

	   start
	*/
	Start *int64

	/* ID.

	   id filter
	*/
	ID *string

	/* Name.

	   name filter
	*/
	Name *string

	/* NameSlug.

	   find by registry name
	*/
	NameSlug *string

	/* Q.

	   query keyword filter
	*/
	Q *string

	/* RegistryTypeID.

	   filter by registry_type_id
	*/
	RegistryTypeID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list registry params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRegistryParams) WithDefaults() *ListRegistryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list registry params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRegistryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list registry params
func (o *ListRegistryParams) WithTimeout(timeout time.Duration) *ListRegistryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list registry params
func (o *ListRegistryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list registry params
func (o *ListRegistryParams) WithContext(ctx context.Context) *ListRegistryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list registry params
func (o *ListRegistryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list registry params
func (o *ListRegistryParams) WithHTTPClient(client *http.Client) *ListRegistryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list registry params
func (o *ListRegistryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXWorkspaceID adds the xWorkspaceID to the list registry params
func (o *ListRegistryParams) WithXWorkspaceID(xWorkspaceID string) *ListRegistryParams {
	o.SetXWorkspaceID(xWorkspaceID)
	return o
}

// SetXWorkspaceID adds the xWorkspaceId to the list registry params
func (o *ListRegistryParams) SetXWorkspaceID(xWorkspaceID string) {
	o.XWorkspaceID = xWorkspaceID
}

// WithEnd adds the end to the list registry params
func (o *ListRegistryParams) WithEnd(end *int64) *ListRegistryParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the list registry params
func (o *ListRegistryParams) SetEnd(end *int64) {
	o.End = end
}

// WithOrder adds the order to the list registry params
func (o *ListRegistryParams) WithOrder(order *string) *ListRegistryParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the list registry params
func (o *ListRegistryParams) SetOrder(order *string) {
	o.Order = order
}

// WithSort adds the sort to the list registry params
func (o *ListRegistryParams) WithSort(sort *string) *ListRegistryParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list registry params
func (o *ListRegistryParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStart adds the start to the list registry params
func (o *ListRegistryParams) WithStart(start *int64) *ListRegistryParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the list registry params
func (o *ListRegistryParams) SetStart(start *int64) {
	o.Start = start
}

// WithID adds the id to the list registry params
func (o *ListRegistryParams) WithID(id *string) *ListRegistryParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the list registry params
func (o *ListRegistryParams) SetID(id *string) {
	o.ID = id
}

// WithName adds the name to the list registry params
func (o *ListRegistryParams) WithName(name *string) *ListRegistryParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list registry params
func (o *ListRegistryParams) SetName(name *string) {
	o.Name = name
}

// WithNameSlug adds the nameSlug to the list registry params
func (o *ListRegistryParams) WithNameSlug(nameSlug *string) *ListRegistryParams {
	o.SetNameSlug(nameSlug)
	return o
}

// SetNameSlug adds the nameSlug to the list registry params
func (o *ListRegistryParams) SetNameSlug(nameSlug *string) {
	o.NameSlug = nameSlug
}

// WithQ adds the q to the list registry params
func (o *ListRegistryParams) WithQ(q *string) *ListRegistryParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the list registry params
func (o *ListRegistryParams) SetQ(q *string) {
	o.Q = q
}

// WithRegistryTypeID adds the registryTypeID to the list registry params
func (o *ListRegistryParams) WithRegistryTypeID(registryTypeID *int64) *ListRegistryParams {
	o.SetRegistryTypeID(registryTypeID)
	return o
}

// SetRegistryTypeID adds the registryTypeId to the list registry params
func (o *ListRegistryParams) SetRegistryTypeID(registryTypeID *int64) {
	o.RegistryTypeID = registryTypeID
}

// WriteToRequest writes these params to a swagger request
func (o *ListRegistryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Workspace-ID
	if err := r.SetHeaderParam("X-Workspace-ID", o.XWorkspaceID); err != nil {
		return err
	}

	if o.End != nil {

		// query param _end
		var qrEnd int64

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatInt64(qrEnd)
		if qEnd != "" {

			if err := r.SetQueryParam("_end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param _order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("_order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param _sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("_sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param _start
		var qrStart int64

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt64(qrStart)
		if qStart != "" {

			if err := r.SetQueryParam("_start", qStart); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NameSlug != nil {

		// query param name_slug
		var qrNameSlug string

		if o.NameSlug != nil {
			qrNameSlug = *o.NameSlug
		}
		qNameSlug := qrNameSlug
		if qNameSlug != "" {

			if err := r.SetQueryParam("name_slug", qNameSlug); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.RegistryTypeID != nil {

		// query param registry_type_id
		var qrRegistryTypeID int64

		if o.RegistryTypeID != nil {
			qrRegistryTypeID = *o.RegistryTypeID
		}
		qRegistryTypeID := swag.FormatInt64(qrRegistryTypeID)
		if qRegistryTypeID != "" {

			if err := r.SetQueryParam("registry_type_id", qRegistryTypeID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
