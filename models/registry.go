// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Registry registry
//
// swagger:model Registry
type Registry struct {

	// account id
	AccountID string `json:"account_id,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// created by name
	CreatedByName string `json:"created_by_name,omitempty"`

	// deleted at
	DeletedAt string `json:"deleted_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// first tag
	FirstTag string `json:"first_tag,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// latest tag
	LatestTag string `json:"latest_tag,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number of images
	NumberOfImages int64 `json:"number_of_images,omitempty"`

	// project id
	ProjectID int64 `json:"project_id,omitempty"`

	// provider id
	ProviderID string `json:"provider_id,omitempty"`

	// providers
	Providers *ResourceProviders `json:"providers,omitempty"`

	// Public to support aws public/private repos
	Public bool `json:"public,omitempty"`

	// registry type id
	RegistryTypeID int64 `json:"registry_type_id,omitempty"`

	// registry type name
	RegistryTypeName string `json:"registry_type_name,omitempty"`

	// resource group name
	ResourceGroupName string `json:"resource_group_name,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// updated by id
	UpdatedByID string `json:"updated_by_id,omitempty"`

	// updated by name
	UpdatedByName string `json:"updated_by_name,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// workspaces
	Workspaces *MongoResourceWorkspaces `json:"workspaces,omitempty"`
}

// Validate validates this registry
func (m *Registry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Registry) validateProviders(formats strfmt.Registry) error {
	if swag.IsZero(m.Providers) { // not required
		return nil
	}

	if m.Providers != nil {
		if err := m.Providers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("providers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("providers")
			}
			return err
		}
	}

	return nil
}

func (m *Registry) validateWorkspaces(formats strfmt.Registry) error {
	if swag.IsZero(m.Workspaces) { // not required
		return nil
	}

	if m.Workspaces != nil {
		if err := m.Workspaces.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspaces")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspaces")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this registry based on the context it is used
func (m *Registry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkspaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Registry) contextValidateProviders(ctx context.Context, formats strfmt.Registry) error {

	if m.Providers != nil {
		if err := m.Providers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("providers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("providers")
			}
			return err
		}
	}

	return nil
}

func (m *Registry) contextValidateWorkspaces(ctx context.Context, formats strfmt.Registry) error {

	if m.Workspaces != nil {
		if err := m.Workspaces.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspaces")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspaces")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Registry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Registry) UnmarshalBinary(b []byte) error {
	var res Registry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
