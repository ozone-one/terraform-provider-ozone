// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateApplicationRequest create application request
//
// swagger:model createApplicationRequest
type CreateApplicationRequest struct {

	// apm
	Apm *ApplicationAPM `json:"apm,omitempty"`

	// custom
	Custom *CustomApplication `json:"custom,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// envs
	Envs []string `json:"envs"`

	// ml verification
	MlVerification *ApplicationMLVerification `json:"mlVerification,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// pipelines
	Pipelines []*MongoObjectIDStruct `json:"pipelines"`

	// type id
	// Required: true
	// Maximum: 2
	// Minimum: 1
	TypeID *int64 `json:"type_id"`
}

// Validate validates this create application request
func (m *CreateApplicationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMlVerification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateApplicationRequest) validateApm(formats strfmt.Registry) error {
	if swag.IsZero(m.Apm) { // not required
		return nil
	}

	if m.Apm != nil {
		if err := m.Apm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apm")
			}
			return err
		}
	}

	return nil
}

func (m *CreateApplicationRequest) validateCustom(formats strfmt.Registry) error {
	if swag.IsZero(m.Custom) { // not required
		return nil
	}

	if m.Custom != nil {
		if err := m.Custom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom")
			}
			return err
		}
	}

	return nil
}

func (m *CreateApplicationRequest) validateMlVerification(formats strfmt.Registry) error {
	if swag.IsZero(m.MlVerification) { // not required
		return nil
	}

	if m.MlVerification != nil {
		if err := m.MlVerification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mlVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mlVerification")
			}
			return err
		}
	}

	return nil
}

func (m *CreateApplicationRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateApplicationRequest) validatePipelines(formats strfmt.Registry) error {
	if swag.IsZero(m.Pipelines) { // not required
		return nil
	}

	for i := 0; i < len(m.Pipelines); i++ {
		if swag.IsZero(m.Pipelines[i]) { // not required
			continue
		}

		if m.Pipelines[i] != nil {
			if err := m.Pipelines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pipelines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pipelines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateApplicationRequest) validateTypeID(formats strfmt.Registry) error {

	if err := validate.Required("type_id", "body", m.TypeID); err != nil {
		return err
	}

	if err := validate.MinimumInt("type_id", "body", *m.TypeID, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("type_id", "body", *m.TypeID, 2, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create application request based on the context it is used
func (m *CreateApplicationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMlVerification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePipelines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateApplicationRequest) contextValidateApm(ctx context.Context, formats strfmt.Registry) error {

	if m.Apm != nil {
		if err := m.Apm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apm")
			}
			return err
		}
	}

	return nil
}

func (m *CreateApplicationRequest) contextValidateCustom(ctx context.Context, formats strfmt.Registry) error {

	if m.Custom != nil {
		if err := m.Custom.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom")
			}
			return err
		}
	}

	return nil
}

func (m *CreateApplicationRequest) contextValidateMlVerification(ctx context.Context, formats strfmt.Registry) error {

	if m.MlVerification != nil {
		if err := m.MlVerification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mlVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mlVerification")
			}
			return err
		}
	}

	return nil
}

func (m *CreateApplicationRequest) contextValidatePipelines(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pipelines); i++ {

		if m.Pipelines[i] != nil {
			if err := m.Pipelines[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pipelines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pipelines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateApplicationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateApplicationRequest) UnmarshalBinary(b []byte) error {
	var res CreateApplicationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
