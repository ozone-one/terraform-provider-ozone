// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PipelineRun pipeline run
//
// swagger:model PipelineRun
type PipelineRun struct {

	// account id
	AccountID string `json:"account_id,omitempty"`

	// application ID
	ApplicationID string `json:"applicationID,omitempty"`

	// application name
	ApplicationName string `json:"applicationName,omitempty"`

	// cluster ID
	ClusterID string `json:"clusterID,omitempty"`

	// cluster name
	ClusterName string `json:"clusterName,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// created by name
	CreatedByName string `json:"created_by_name,omitempty"`

	// deleted at
	DeletedAt string `json:"deleted_at,omitempty"`

	// env ID
	EnvID string `json:"envID,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// ml verification
	MlVerification *PipelineRunMLVerification `json:"mlVerification,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pipeline ID
	PipelineID string `json:"pipelineID,omitempty"`

	// rollback
	Rollback *PipelineRunRollback `json:"rollback,omitempty"`

	// secret injection
	SecretInjection *PipelineRunSecretInjection `json:"secretInjection,omitempty"`

	// tekton pipeline run
	TektonPipelineRun *DynamicResource `json:"tektonPipelineRun,omitempty"`

	// trigger params
	TriggerParams []*PipelineParam `json:"triggerParams"`

	// trigger resource ID
	TriggerResourceID string `json:"triggerResourceID,omitempty"`

	// trigger resource kind
	TriggerResourceKind string `json:"triggerResourceKind,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// updated by id
	UpdatedByID string `json:"updated_by_id,omitempty"`

	// updated by name
	UpdatedByName string `json:"updated_by_name,omitempty"`
}

// Validate validates this pipeline run
func (m *PipelineRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMlVerification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRollback(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretInjection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTektonPipelineRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineRun) validateMlVerification(formats strfmt.Registry) error {
	if swag.IsZero(m.MlVerification) { // not required
		return nil
	}

	if m.MlVerification != nil {
		if err := m.MlVerification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mlVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mlVerification")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineRun) validateRollback(formats strfmt.Registry) error {
	if swag.IsZero(m.Rollback) { // not required
		return nil
	}

	if m.Rollback != nil {
		if err := m.Rollback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollback")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollback")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineRun) validateSecretInjection(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretInjection) { // not required
		return nil
	}

	if m.SecretInjection != nil {
		if err := m.SecretInjection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretInjection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secretInjection")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineRun) validateTektonPipelineRun(formats strfmt.Registry) error {
	if swag.IsZero(m.TektonPipelineRun) { // not required
		return nil
	}

	if m.TektonPipelineRun != nil {
		if err := m.TektonPipelineRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tektonPipelineRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tektonPipelineRun")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineRun) validateTriggerParams(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerParams) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerParams); i++ {
		if swag.IsZero(m.TriggerParams[i]) { // not required
			continue
		}

		if m.TriggerParams[i] != nil {
			if err := m.TriggerParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("triggerParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("triggerParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this pipeline run based on the context it is used
func (m *PipelineRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMlVerification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRollback(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecretInjection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTektonPipelineRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineRun) contextValidateMlVerification(ctx context.Context, formats strfmt.Registry) error {

	if m.MlVerification != nil {
		if err := m.MlVerification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mlVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mlVerification")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineRun) contextValidateRollback(ctx context.Context, formats strfmt.Registry) error {

	if m.Rollback != nil {
		if err := m.Rollback.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollback")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollback")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineRun) contextValidateSecretInjection(ctx context.Context, formats strfmt.Registry) error {

	if m.SecretInjection != nil {
		if err := m.SecretInjection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretInjection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secretInjection")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineRun) contextValidateTektonPipelineRun(ctx context.Context, formats strfmt.Registry) error {

	if m.TektonPipelineRun != nil {
		if err := m.TektonPipelineRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tektonPipelineRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tektonPipelineRun")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineRun) contextValidateTriggerParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TriggerParams); i++ {

		if m.TriggerParams[i] != nil {
			if err := m.TriggerParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("triggerParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("triggerParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineRun) UnmarshalBinary(b []byte) error {
	var res PipelineRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
