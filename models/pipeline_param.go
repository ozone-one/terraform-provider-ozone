// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PipelineParam pipeline param
//
// swagger:model PipelineParam
type PipelineParam struct {

	// default
	Default string `json:"default,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// image tag config
	ImageTagConfig *ImageTagConfig `json:"imageTagConfig,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// required
	Required bool `json:"required,omitempty"`

	// resource ID
	ResourceID string `json:"resourceID,omitempty"`

	// type
	Type int64 `json:"type,omitempty"`

	// type name
	TypeName string `json:"typeName,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this pipeline param
func (m *PipelineParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageTagConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineParam) validateImageTagConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageTagConfig) { // not required
		return nil
	}

	if m.ImageTagConfig != nil {
		if err := m.ImageTagConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageTagConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageTagConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pipeline param based on the context it is used
func (m *PipelineParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImageTagConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineParam) contextValidateImageTagConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageTagConfig != nil {
		if err := m.ImageTagConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageTagConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageTagConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineParam) UnmarshalBinary(b []byte) error {
	var res PipelineParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
