// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomApplication custom application
//
// swagger:model customApplication
type CustomApplication struct {

	// bootstrap value
	BootstrapValue *TemplateBootstrapValues `json:"bootstrapValue,omitempty"`

	// build type
	BuildType *BuildType `json:"build_type,omitempty"`

	// build type id
	BuildTypeID int64 `json:"build_type_id,omitempty"`

	// deploy type
	DeployType *DeploymentType `json:"deploy_type,omitempty"`

	// deploy type id
	DeployTypeID int64 `json:"deploy_type_id,omitempty"`

	// dns
	DNS string `json:"dns,omitempty"`

	// dont need c i
	DontNeedCI bool `json:"dontNeedCI,omitempty"`

	// file location
	FileLocation string `json:"file_location,omitempty"`

	// registry id
	RegistryID string `json:"registry_id,omitempty"`

	// registry name
	RegistryName string `json:"registry_name,omitempty"`

	// repository id
	RepositoryID string `json:"repository_id,omitempty"`

	// repository name
	RepositoryName string `json:"repository_name,omitempty"`

	// template branch
	TemplateBranch string `json:"template_branch,omitempty"`

	// template repo enabled
	TemplateRepoEnabled bool `json:"template_repo_enabled,omitempty"`

	// template repository id
	TemplateRepositoryID string `json:"template_repository_id,omitempty"`

	// template sub folder
	TemplateSubFolder string `json:"template_sub_folder,omitempty"`
}

// Validate validates this custom application
func (m *CustomApplication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootstrapValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomApplication) validateBootstrapValue(formats strfmt.Registry) error {
	if swag.IsZero(m.BootstrapValue) { // not required
		return nil
	}

	if m.BootstrapValue != nil {
		if err := m.BootstrapValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bootstrapValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bootstrapValue")
			}
			return err
		}
	}

	return nil
}

func (m *CustomApplication) validateBuildType(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildType) { // not required
		return nil
	}

	if m.BuildType != nil {
		if err := m.BuildType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build_type")
			}
			return err
		}
	}

	return nil
}

func (m *CustomApplication) validateDeployType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployType) { // not required
		return nil
	}

	if m.DeployType != nil {
		if err := m.DeployType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploy_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploy_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this custom application based on the context it is used
func (m *CustomApplication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBootstrapValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuildType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomApplication) contextValidateBootstrapValue(ctx context.Context, formats strfmt.Registry) error {

	if m.BootstrapValue != nil {
		if err := m.BootstrapValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bootstrapValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bootstrapValue")
			}
			return err
		}
	}

	return nil
}

func (m *CustomApplication) contextValidateBuildType(ctx context.Context, formats strfmt.Registry) error {

	if m.BuildType != nil {
		if err := m.BuildType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build_type")
			}
			return err
		}
	}

	return nil
}

func (m *CustomApplication) contextValidateDeployType(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployType != nil {
		if err := m.DeployType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploy_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploy_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomApplication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomApplication) UnmarshalBinary(b []byte) error {
	var res CustomApplication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
